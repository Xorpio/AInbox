@page "/"
@using MailKit
@using MailKit.Net.Imap
@using MailKit.Search
@using ainbox.Shared.Services
@inject ISettingsService SettingsService
@inject NavigationManager Navigation

<PageTitle>Inbox</PageTitle>

<h1>Inbox page</h1>


@if (@username == null || @password == null)
{
    <div>No username or password configured.</div>
}
else
{
        <p>Total messages: @inboxCount</p>
        <p>Recent messages: @inboxRecent</p>
        <p>First subject: @subject</p>

        <ul class="list-group">
            @foreach(var email in emails)
            {
                <li class="list-group-item list-group-item-action" style="cursor: pointer;" @onclick="() => NavigateToEmail(email.UniqueId)">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="mb-1">@email.Subject</h6>
                            <p class="mb-1">@email.Sender</p>
                            <small>@email.Preview</small>
                        </div>
                        <small>@email.Date.ToString("MMM dd")</small>
                    </div>
                </li>
            }
        </ul>
}

@code {
    private int? inboxCount;
    private int? inboxRecent;
    private string subject;
    private List<EmailMessage> emails = new List<EmailMessage>();

    private string? username;
    private string? password;

    protected override async Task OnInitializedAsync()
    {
        if (username == null || password == null)
        {
            username = await SettingsService.GetSetting("Username");
            password = await SettingsService.GetSetting("Password");
        }

        if (username != null && password != null)
        {
            using (var client = new ImapClient())
            {
                client.Connect("imap.gmail.com", 993, true);

                await client.AuthenticateAsync(username, password);

                // Select the inbox
                var inbox = client.Inbox;
                inbox.Open(MailKit.FolderAccess.ReadOnly);

                // Fetch the messages
                var query = SearchQuery.All;
                var uids = inbox.Search(query);
                var messages = inbox.Fetch(uids, MailKit.MessageSummaryItems.Envelope);

                // Order the messages by date
                var orderedMessages = messages.OrderByDescending(m => m.Envelope.Date).ToList().Take(100);

                // Display the ordered messages
                foreach (var message in orderedMessages)
                {
                    emails.Add(new EmailMessage
                    {
                        Subject = message.Envelope.Subject ?? "No Subject",
                        Sender = message.Envelope.From.FirstOrDefault()?.Name ?? message.Envelope.From.FirstOrDefault()?.ToString() ?? "Unknown Sender",
                        Date = message.Envelope.Date ?? DateTimeOffset.Now,
                        UniqueId = message.UniqueId,
                        Preview = $"{message.Envelope.Date}: {message.Envelope.Subject}"
                    });
                }

                // Disconnect from the server
                client.Disconnect(true);
            }
        }

        await base.OnInitializedAsync();
    }

    private void NavigateToEmail(UniqueId emailId)
    {
        Navigation.NavigateTo($"/email/{emailId.Id}");
    }
}
